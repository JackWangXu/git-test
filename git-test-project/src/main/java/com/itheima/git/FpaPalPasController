package com.cmb.ars.core.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.cmb.ars.core.base.BaseController;
import com.cmb.ars.core.base.ResponseEntity;
import com.cmb.ars.core.constant.ExcelConstant;
import com.cmb.ars.core.domain.FpaPalPas;
import com.cmb.ars.core.service.FpaPalPasService;
import com.cmb.ars.excel.conf.SheetProperty;
import com.cmb.framework.utils.StringUtils;

/**
 * 
 * @author 80374773
 * 
 */
@RestController
@RequestMapping(value = "/api/fpa/palPas")
public class FpaPalPasController extends BaseController{
	
	private static final Logger LOGGER = Logger.getLogger(FpaPalPasController.class);
	
	@Autowired
	private FpaPalPasService fpaPalPasService;
	
	/**
	 * 显示保灵通中间表
	 * 
	 * @param obj
	 * @return
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<List<FpaPalPas>> selectFpaPalPas(FpaPalPas fpaPalPas){
		return fpaPalPasService.getSelectPageResponseEntity(fpaPalPas);
	}
		
	/**
	 * 批量插入保灵通中间表,即新增
	 * 
	 * @param obj
	 * @return
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<FpaPalPas> batchInsert(@RequestBody List<FpaPalPas> fpp){
		for (FpaPalPas fpaPalPas : fpp) {
			if(StringUtils.isEmpty(fpaPalPas.getBalAmt())){
				fpaPalPas.setBalAmt(null);
			}else{
				BigDecimal mData = new BigDecimal(fpaPalPas.getBalAmt().trim()).setScale(2, BigDecimal.ROUND_HALF_UP);
				fpaPalPas.setBalAmt(mData.toString());
			}
			fpaPalPasService.insert(fpaPalPas);
		}
		return new ResponseEntity<FpaPalPas>(true, null, "");
	}
	
	/**
	 * 批量更新保灵通中间表,即保存
	 * 
	 * @param obj
	 * @return
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.PUT)
	public ResponseEntity<FpaPalPas> batchUpdate(@RequestBody Map<String, List<FpaPalPas>> map){
		List<FpaPalPas> result = map.get("result");
		for (FpaPalPas fpaPalPas : result) {
			if(StringUtils.isEmpty(fpaPalPas.getBalAmt())){
				fpaPalPas.setBalAmt(null);
			}else{
				BigDecimal mData = new BigDecimal(fpaPalPas.getBalAmt().trim()).setScale(2, BigDecimal.ROUND_HALF_UP);
				fpaPalPas.setBalAmt(mData.toString());
			}
			fpaPalPasService.update(fpaPalPas);
		}
		return new ResponseEntity<FpaPalPas>(true, null, "");
	}
	
	/**
	 * 批量删除保灵通中间表,即删除
	 * 
	 * @param obj
	 * @return
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.DELETE)
	public ResponseEntity<List<FpaPalPas>> delete(@RequestBody List<FpaPalPas> fpaPalPas) {
		int recordCount = fpaPalPasService.delete(fpaPalPas);
		ResponseEntity<List<FpaPalPas>> responseEntity = new ResponseEntity<List<FpaPalPas>>(true,null,"删除成功！");
		responseEntity.setTotal(Long.valueOf(recordCount));
		return responseEntity;
	}
	
	/**
	 * 导入EXCEL
	 * 
	 * @param obj
	 * @return
	 */
	// 由于返回object后返回信息会自动添加前缀，目前使用String类型返回值。
	@ResponseBody
	@RequestMapping(value = "excel", method = RequestMethod.POST)
	public String dataImport(
			@RequestParam("file") CommonsMultipartFile excelFile,
			@RequestParam("tskId") String tskId) throws IOException {
		SheetProperty config = new SheetProperty();
		final LinkedList<Integer> countList = new LinkedList<Integer>();
		try {
			fpaPalPasService.batchUpdateByExcel(excelFile.getFileItem()
					.getName(), excelFile.getInputStream(), tskId, config,
					fpaPalPasService, countList);
		} catch (Exception e) {
			LOGGER.error("文件格式不合法，请使用下载后的文件进行补录！", e);
		}
		if (countList.get(0) == 0 && countList.get(1) == 0) {
			return "{success:true, msg:\"导入内容为空，请检查Excel!\"}";
		} else if (countList.get(0) != 0 && countList.get(1) == 0) {
			return "{success:true, msg:\"" + countList.get(0) + "条导入成功。\"}";
		} else {
			StringBuilder errLocate = new StringBuilder();
			for (int i = 2; i < countList.size(); i++) {
				if (i == countList.size() - 1) {
					errLocate.append(countList.get(i));
				} else {
					errLocate.append(countList.get(i) + "、");
				}
			}
			String str = errLocate.toString();
			return "{success:false, msg:\"" + countList.get(0) + "条可导入成功，" + countList.get(1) + "条会导致导入失败!"
					+ "错误存在于EXCEL中第" + str + "行，可能是字段超长或字段内容错误，请核对。\"}";
		}
	}
	
	/**
	 * 导出EXCEL
	 * 
	 * @param obj
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "excel", method = RequestMethod.GET)
	public void exportExcel(FpaPalPas fpaPalPas, HttpServletResponse response) {
		response.setContentType("application/vnd.ms-excel");
		String outPutFilename = ExcelConstant.PALPAS_CHINESENAME;
		try {
			outPutFilename = URLEncoder.encode(outPutFilename, "utf8");
			response.setHeader("content-disposition", "attachment;filename=\""
					+ outPutFilename + ".xlsx\"" );
			fpaPalPasService.exportExcel(fpaPalPas, response.getOutputStream());
		} catch (Exception e) {
			LOGGER.error("导出excel出错！", e);
		}
	}
}
